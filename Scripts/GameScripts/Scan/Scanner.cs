// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections.Generic;
using System.Threading;
using System.IO;
using System.Drawing;
using System.Drawing.Imaging;
using ZXing.QrCode;
using ZXing;
using ZXing.Common;
/// <summary>
/// 图片扫描功能类
/// </summary>
public class Scanner : XRUnitySingleton<Scanner>
{
    public float CreateInternal = 5.0f;
    /// <summary>
    /// 测试模式，如果开启则在不联网状态下也可以生成。并且不会发送网络信息
    /// </summary>
    public bool IsTestMode;


    public bool IsIngoreSameQrcode;//是否无视重复的二维码
    public bool IsEnableScan { get; set; }

    /// <summary>
    /// 达到多少条进行清理
    /// </summary>
    public int AutoClearCount = 80;

    /// <summary>
    /// 清理个数
    /// </summary>
    public int AutoClearAmount = 40;


    float fCurInternalTime;
    //the thread scans photoes
    Thread _scanThread;
    //the path which saves the photoes;
    string _photoesPath;
    //the path which saves the cutQRCode;
    string _photoCutsPath;
    string _photoCachePath;
    string _copyDestPath;

    DirectoryInfo _photoesDirInfo;
    DirectoryInfo _photeCachesDirInfo;


    List<CreateFromCacheInfo> _createFromCacheInfos = new List<CreateFromCacheInfo>();
    /// <summary>
    /// 等待服务器回应，待创建的鱼信息
    /// </summary>
    Dictionary<string, CreateInfo> _actorInfos = new Dictionary<string, CreateInfo>();
    /// <summary>
    /// 已经得到服务器回应，待实例化的鱼的信息
    /// </summary>
    List<CreateInfo> _createInfos = new List<CreateInfo>();
    /// <summary>
    /// 成功实例化，准备被缓存的鱼的信息
    /// </summary>
    List<CreateInfo> _saveCacheInfos = new List<CreateInfo>();
    object _mylocker = new object();
    Dictionary<string, ScanCacheData> _cacheDataMap;

    public static bool IsTestTexture = false;
    void OnMsgUploadPicureCallback(MsgUploadPictureCallback msg)
    {
        if (msg.Result == MsgFlag.ScanResult_NoTime)
        {
            Debug.LogError("扫描失败，次数已用完");
            //EventDispatcher.TriggerEvent<string, float>(Events.OPERATION_NOTIFYCATION, "扫描失败，次数已用完", 4f);
            return;
        }
        if (msg.Result == MsgFlag.ScanResult_OtherError)
        {
            Debug.LogError("扫描失败，未知错误");
            //EventDispatcher.TriggerEvent<string, float>(Events.OPERATION_NOTIFYCATION, "扫描失败，未知错误", 4f);
            return;
        }
        CreateInfo info;
        if (_actorInfos.TryGetValue(msg.QRCode, out info))
        {
            // _actorInfos.Remove(msg.QRCode);
            info.Type = msg.FishTypeId;
            info.IsScanFish = true;
            info.GrowValue = 30;
            AddCreateInfo(info);
        }
    }
    public override void Awake()
    {
        Debug.LogError(this.gameObject.name);
        _cacheDataMap = ScanCacheData.DataMap;
        EventDispatcher.AddEventListener(Events.CLEAR_FISHES, ClearFishes);
        fCurInternalTime = CreateInternal;
        //开启检测线程.
        InitPathes().StartScanThread();
        IsEnableScan = true;
    }


    void Update()
    {
        UpdateCreateActor();
    }

    void UpdateCreateActor()
    {
        if (ActorEntity.IsAnyOneShowing) return;//当有任何鱼处于展示状态的时候，不计算时间生成新的鱼
        if (fCurInternalTime < CreateInternal)
        {
            fCurInternalTime += Time.deltaTime;
            return;
        }
        lock (_mylocker)
        {
            if (_createInfos.Count > 0)
            {
                fCurInternalTime = 0f;
                CreateOneActor();
            }
            else
            {
                fCurInternalTime = CreateInternal - 0.1f;
            }
        }
    }


    public void AddCreateInfo(CreateInfo info)
    {
        lock (_mylocker)
        {
            if (!info.IsScanFish)
            {
                _createInfos.Add(info);
                return;
            }
            for (int i = 0; i < _createInfos.Count; ++i)
            {
                if (!_createInfos[i].IsScanFish)
                {
                    _createInfos.Insert(i, info);//排在扫描鱼的队列的最后面,甩出的鱼的最前面
                    break;
                }
            }
            if (!_createInfos.Contains(info))
            {
                _createInfos.Add(info);
            }
        }
    }

    int _increase;
    void CreateOneActor()
    {
        CreateInfo info = _createInfos[0];
        _createInfos.RemoveAt(0);

        List<ActorEntity> actors = ActorPool.GetActiveActors();
        string qrCode = info.QRCode;
        for (int i = 0; i < actors.Count; ++i)
        {
            if (actors[i].QRCode == qrCode)
            {
                int userId = actors[i].UserId;
                if (userId >= 0)
                {
                    info.UserID = userId;
                }
                if (IsIngoreSameQrcode)
                {
                    actors[i].SetQrcode(actors[i].QRCode + _increase++);
                }
                else
                {
                    ActorPool.Return(actors[i]);
                }
                break;
            }
        }
        ActorEntity actorEntity = ActorPool.GetOne(info.Type);
        if (actorEntity != null)
        {
            if (info.Datas != null)
            {
                Texture2D shotTexture = new Texture2D(ActorEntity.TextureWidth, ActorEntity.TextureHeight);
                shotTexture.LoadImage(info.Datas);
                actorEntity.SetTexture(shotTexture);
                _saveCacheInfos.Add(info);//将成功实例化的角色加入缓存队列
            }
            actorEntity.Create(info);
            actorEntity.gameObject.SetActive(true);
            actorEntity.Run();
        }
        else
        {
            UnityEngine.Debug.LogError(string.Format("Not exist actorType:{0} in pool", info.Type));
        }
        UnityEngine.Debug.LogError("Create a actor,QrCode:" + info.QRCode);
        CheckClear();
    }


    #region 缓存
    void SaveCaches()
    {
        lock (_mylocker)
        {
            if (_saveCacheInfos.Count == 0) return;
        }
        for (int i = _saveCacheInfos.Count - 1; i >= 0; --i)
        {
            CreateInfo info = null;
            info = _saveCacheInfos[i];
            lock (_mylocker)
            {
                _saveCacheInfos.Remove(info);
            }
            SaveCache(info);
        }
    }

    void SaveCache(CreateInfo info)
    {
        string savePath = _photoCachePath + info.QRCode + ".JPG";
        using (FileStream fs = new FileStream(savePath, FileMode.Create))
        {
            fs.Write(info.Datas, 0, info.Datas.Length);
            fs.Flush();
        }
        ScanCacheData data = new ScanCacheData
        {
            Id = info.QRCode,
            MD5Hash = info.MD5Hash
        };
        var dataMap = ScanCacheData.DataMap;
        if (dataMap.ContainsKey(data.Id))
        {
            dataMap[data.Id] = data;
        }
        else
        {
            dataMap.Add(data.Id, data);
        }
    }
    #endregion


    #region 目录管理
    Scanner InitPathes()
    {
        string libDir = Path.GetDirectoryName(Application.dataPath) + "/PhotoLibrary";
        _copyDestPath = libDir + "/";
        _photoesPath = libDir + "/Photoes/";
        _photoCutsPath = libDir + "/Cuts/Cut.JPG";
        _photoCachePath = libDir + "/Cache/";
        GetDir(libDir + "/Cuts/");
        _photoesDirInfo = GetDir(_photoesPath);
        _photeCachesDirInfo = GetDir(_photoCachePath);
        ClearPhotoes();
        return this;
    }




    DirectoryInfo GetDir(string dir)
    {
        if (Directory.Exists(dir))
        {
            return new DirectoryInfo(dir);
        }
        return Directory.CreateDirectory(dir);
    }


    void ClearPhotoes()
    {
        foreach (FileInfo file in _photoesDirInfo.GetFiles())
        {
            file.Delete();
        }
    }
    #endregion


    #region 扫描

    Scanner StartScanThread()
    {
        _scanThread = new Thread(ScanGO);
        _scanThread.IsBackground = true;
        _scanThread.Start();
        return this;
    }

    void ScanGO()
    {
        while (true)
        {
            Thread.Sleep(5);
            if (!IsEnableScan)
                continue;
            try
            {
                ScanPhotoes();
                ReadCacheCreateInfos();
                SaveCaches();
            }
            catch (OutOfMemoryException ex)
            {
                UnityEngine.Debug.LogError("OutOfMemoryException:" + ex.Message);
            }
            catch (Exception ex)
            {
                UnityEngine.Debug.LogError("Scan exception:" + ex.Message);
            }
        }
    }

    /// <summary>
    /// 检索扫描的目录
    /// </summary>
    void ScanPhotoes()
    {
        foreach (FileInfo info in _photoesDirInfo.GetFiles())
        {
            if (info.Name.ToUpper().EndsWith(".JPG"))
            {
                string copyDest = _copyDestPath + info.Name;
                bool isWaiting = true;
                while (isWaiting)
                {
                    try
                    {
                        File.Copy(info.FullName, copyDest, true);
                        isWaiting = false;
                    }
                    catch
                    {
                        Thread.Sleep(5);
                    }
                }
                Image snapPic = Image.FromFile(info.FullName);

                MemoryStream ms = new MemoryStream();
                snapPic.Save(ms, System.Drawing.Imaging.ImageFormat.Jpeg);
                Byte[] datas = ms.ToArray();
                ms.Close();
                string qrCode = GetQRCode(snapPic);
                snapPic.Dispose();
                File.Delete(copyDest);
                if (qrCode != null)
                {
                    string md5 = FileUtility.GetMD5HashFromBytes(datas);
                    CreateInfo create = new CreateInfo { QRCode = qrCode, MD5Hash = md5, Datas = datas };
                    AddFishInfo(create);
                }
                if (IsTestMode)
                {
                    TimerService.AddTimer<string>(0, TestModeCreateActor, qrCode);
                }
                info.Delete();
            }
        }
    }

    /// <summary>
    /// 读取从缓存创建鱼的信息
    /// </summary>
    void ReadCacheCreateInfos()
    {
        while (_createFromCacheInfos.Count > 0)
        {
            CreateFromCacheInfo info = null;
            lock (_mylocker)
            {
                info = _createFromCacheInfos[0];
                _createFromCacheInfos.RemoveAt(0);
            }
            try
            {
                using (Image image = Image.FromFile(info.Path))
                {
                    MemoryStream ms = new MemoryStream();
                    image.Save(ms, ImageFormat.Jpeg);
                    CreateInfo cInfo = new CreateInfo(info);
                    cInfo.Datas = ms.ToArray();
                    ms.Close();
                    lock (_mylocker)
                    {
                        AddCreateInfo(cInfo);
                    }
                }
            }
            catch (Exception ex)
            {
                UnityEngine.Debug.LogError("CreateFromCache exception:" + ex.Message);
            }
        }
    }
    /// <summary>
    /// 使用ZXing插件识别二维码
    /// </summary>
    /// <param name="image"></param>
    /// <returns></returns>
    string GetQRCode(Image image)
    {
        BarcodeReader reader = new BarcodeReader();
        MultiFormatReader mutiReader=new MultiFormatReader();
        Bitmap map = (Bitmap)image;
        int width=(int)(map.Width * 0.1);
        int height= (int)(map.Height * 0.14);
        Bitmap bimap = new Bitmap(width, height);
        int tryCount = 0;
        int widthOffset = (int)(map.Width * 0.007);
        int heightOffset = (int)(map.Height * 0.007);
        Result result = null;
        //byte[] targetBytes = new byte[width * height];
        //裁剪右下角二维码
        Action actionDecode = delegate
            {
                int z = 0;
                for (int i = bimap.Height - 1; i >= 0; --i)
                {
                    for (int m = bimap.Width - 1; m >= 0; --m)
                    {
                        var color= map.GetPixel(map.Width - m - 1 - widthOffset - tryCount, map.Height - i - 1 - heightOffset - tryCount);
                        bimap.SetPixel(bimap.Width - m - 1, bimap.Height - i - 1, color);
                    }
                }
                result = reader.Decode(bimap);
            };

        while (result == null && ++tryCount < 50)
        {
            actionDecode();
        }
        bimap.Save(_photoCutsPath, ImageFormat.Jpeg);
        bimap.Dispose();
        if (result != null)
        {
            return System.Text.RegularExpressions.Regex.Replace(result.Text, @"[/n/r]", "").Trim();
        }
        else
        {
            Action action = () =>
                {
                    Debug.LogError("Failed to get QRCode from this picture");
                };
            TimerService.AddOtherThreadSignal(action);
        }
        return null;
    }

    void AddFishInfo(CreateInfo info)
    {
        if (!_actorInfos.ContainsKey(info.QRCode))
        {
            _actorInfos.Add(info.QRCode, info);
        }
        else
        {
            _actorInfos[info.QRCode] = info;
        }
    }
    #endregion

    public override void OnDestroy()
    {
        if (_scanThread != null)
        {
            try
            {
                _scanThread.Abort();
            }
            catch (Exception ex)
            {
                UnityEngine.Debug.LogError(ex.Message);
            }
            finally
            {
                ClearPhotoes();
                _scanThread = null;
            }
        }
        EventDispatcher.RemoveEventListener(Events.CLEAR_FISHES, ClearFishes);
        base.OnDestroy();
    }

    void ClearFishes()
    {
        List<ActorEntity> actors = ActorPool.GetActiveActors();
        for (int i = actors.Count - 1; i >= 0; --i)
        {
            ActorEntity actor = actors[i];
            if (actor.ActorType != ActorType.ScanFish)
                continue;
            ActorPool.Return(actor);
        }

        Resources.UnloadUnusedAssets();
        GC.Collect();
    }

    void CheckClear()
    {
        List<ActorEntity> actorsAll = ActorPool.GetActiveActors();
        List<ActorEntity> actors = new List<ActorEntity>();
        for (int i = 0; i < actorsAll.Count; ++i)
        {
            ActorEntity one = actorsAll[i];
            if (one.ActorType != ActorType.SceneFish)
            {
                actors.Add(one);
            }
        }
        if (actors.Count < AutoClearCount)
        {
            return;
        }
        while (actors.Count >= AutoClearCount - AutoClearCount && actors.Count > 0)
        {
            ActorPool.Return(actors[0]);
        }
        Resources.UnloadUnusedAssets();
        GC.Collect();
    }

    void OnDisconected()
    {
        if(_actorInfos.Count>0)
        {
            _actorInfos.Clear();
            Debug.LogError("网络状态不佳，请重新扫描");
        }
    }

    public void OnApplicationQuit()
    {
        if (ScanCacheData.DataMap.Count > 0)
        {
            if(ScanCacheData.DataMap.Count>1000)//缓存占用太多时候，自动清除
            {
                ScanCacheData.DataMap.Clear();
                Directory.Delete(_photoCachePath);
            }
            ScanCacheData.Save();
        }
    }

    //测试用
    void TestModeCreateActor(string qrCode)
    {
        int result = 1;
        int createType = Convert.ToInt32(qrCode.Substring(1, 4));
        //TestLocalData data;
        //if (TestLocalData.DataMap.TryGetValue(qrCode, out data))
        //{
        //    result = data.RemainScanTime > 0 ? 1 : 2;
        //    data.RemainScanTime--;
        //    if (data.RemainScanTime < 0)
        //    {
        //        data.RemainScanTime = 0;
        //    }
        //    createType = data.TypeId;
        //    TestLocalData.Save();
        //}
        //else
        //{
        //    createType = TestCreateType;
        //    result = MsgFlag.ScanResult_OtherError;
        //}
        MsgUploadPictureCallback msg = new MsgUploadPictureCallback
        {
            FishTypeId = createType,
            Result = result,
            QRCode = qrCode
        };
        OnMsgUploadPicureCallback(msg);
        Debug.Log("QRCODE:" + qrCode);
    }

    public class CreateInfo
    {
        public int Type;
        public string QRCode;
        public string MD5Hash;
        public Byte[] Datas;
        public int UserID = -1;
        public int GrowValue;
        public bool IsScanFish;

        public CreateInfo()
        {

        }

        public CreateInfo(CreateFromCacheInfo info)
        {
            this.Type = info.Type;
            this.QRCode = info.QRCode;
            this.MD5Hash = info.MD5Hash;
            this.UserID = info.UserID;
        }
    }

    public class CreateFromCacheInfo
    {
        public int Type;
        public string QRCode;
        public string MD5Hash;
        public string Path;
        public int UserID = -1;
        public int GrowValue;
    }
}
public class MsgUploadPictureCallback
{
    public int Result;

    public string QRCode;

    public int FishTypeId;
}
public class MsgFlag
{
    public const int ScanResult_OK = 1;
    public const int ScanResult_NoTime = 2;
    public const int ScanResult_OtherError = 3;
}


